{
  "language": "Solidity",
  "sources": {
    "contracts/ExampleExternalContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;  //Do not change the solidity version as it negativly impacts submission grading\n\ncontract ExampleExternalContract {\n\n  bool public completed;\n\n  function complete() public payable {\n    completed = true;\n  }\n\n}\n"
    },
    "contracts/Staker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4; //Do not change the solidity version as it negativly impacts submission grading\n\n//import \"hardhat/console.sol\";\nimport \"./ExampleExternalContract.sol\";\n\ncontract Staker {\n    ExampleExternalContract public exampleExternalContract;\n    mapping(address => uint256) public balances;\n\n    uint256 public constant threshold = 1 ether;\n    uint256 public deadline = block.timestamp + 72 hours;\n    bool public openForWithdraw;\n\n    event Stake(address funder, uint256 amount);\n\n    modifier canWithdraw() {\n        require(\n            openForWithdraw,\n            //            block.timestamp >= deadline &&\n            //            address(this).balance < threshold\n            \"Not ready for withdraw\"\n        );\n        _;\n    }\n    modifier notCompleted() {\n        require(\n            !exampleExternalContract.completed(),\n            \"External contract completed\"\n        );\n        _;\n    }\n\n    constructor(address exampleExternalContractAddress) {\n        exampleExternalContract = ExampleExternalContract(\n            exampleExternalContractAddress\n        );\n    }\n\n    // Collect funds in a payable `stake()` function and track individual `balances` with a mapping:\n    // (Make sure to add a `Stake(address,uint256)` event and emit it for the frontend `All Stakings` tab to display)\n    function stake() public payable {\n        balances[msg.sender] += msg.value;\n        emit Stake(msg.sender, msg.value);\n    }\n\n    // After some `deadline` allow anyone to call an `execute()` function\n    // If the deadline has passed and the threshold is met, it should call `exampleExternalContract.complete{value: address(this).balance}()`\n    function execute() external notCompleted {\n        if (block.timestamp >= deadline) {\n            if (address(this).balance >= threshold) {\n                uint256 contractBalance = address(this).balance;\n                exampleExternalContract.complete{value: contractBalance}();\n            } else openForWithdraw = true;\n        }\n    }\n\n    // If the `threshold` was not met, allow everyone to call a `withdraw()` function to withdraw their balance\n    function withdraw() external notCompleted canWithdraw {\n        if (balances[msg.sender] > 0) {\n            (bool success,) = msg.sender.call{value: balances[msg.sender]}(\n                \"\"\n            );\n            if (!success) {\n                /* ??? */\n            }\n        }\n    }\n\n    function isEligibleForTransfer()\n    internal\n    view\n    returns (bool balanceCheck, bool deadlineCheck)\n    {\n        balanceCheck = address(this).balance >= threshold;\n        deadlineCheck = block.timestamp >= deadline;\n    }\n\n    // Add a `timeLeft()` view function that returns the time left before the deadline for the frontend\n    function timeLeft() public view returns (uint256) {\n        return (\n            deadline > block.timestamp\n                ? (deadline - block.timestamp)\n                : uint256(0)\n        );\n    }\n\n    // Add the `receive()` special function that receives eth and calls stake()\n    receive() external payable {\n        stake();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}